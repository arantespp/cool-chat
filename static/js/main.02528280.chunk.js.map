{"version":3,"sources":["functionalities/user/use-user-data.ts","functionalities/messages/index.ts","functionalities/messages/use-all-messages.ts","functionalities/messages/use-send-message.ts","functionalities/auth/use-sign-in.ts","functionalities/auth/index.ts","functionalities/index.tsx","serviceWorker.ts","pages/Chat/View.tsx","components/Button/index.tsx","components/Card/index.tsx","components/Input/index.tsx","components/Loading/index.tsx","layouts/ChatInput/View.tsx","layouts/ChatInput/index.tsx","layouts/ChatMessageCard/View.tsx","layouts/ChatMessageCard/index.tsx","layouts/ChatMessages/View.tsx","layouts/ChatMessages/index.tsx","pages/Chat/index.tsx","pages/SignIn/View.tsx","pages/SignIn/index.tsx","App.tsx","index.tsx","functionalities/client.ts","functionalities/user/index.ts","functionalities/messages/use-get-old-messages.ts","functionalities/messages/use-sent-message.ts"],"names":["useUserData","_useState","useState","name","_useState2","Object","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","user","setUserState","_useState3","_useState4","error","setError","useEffect","localforage","getItem","then","catch","err","setUser","_ref","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","u","wrap","_context","prev","next","setItem","sent","t0","stop","_x","apply","this","arguments","__webpack_require__","_use_all_messages__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_use_send_message__WEBPACK_IMPORTED_MODULE_3__","useAllMessages","_useGetOldMessages","useGetOldMessages","data","loading","sentMessage","useSentMessage","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","allMessages","setAllMessages","getOldMessages","all","concat","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","find","author","content","dateTime","SEND_MESSAGE","gql","_templateObject","useSendMessage","variables","client","mutate","mutation","fetchPolicy","useSignIn","_useUserData","slicedToArray","setLoading","signedIn","setSignedIn","signIn","asyncToGenerator","regenerator_default","use_sign_in_useSignIn","_auth__WEBPACK_IMPORTED_MODULE_0__","_messages__WEBPACK_IMPORTED_MODULE_1__","o","_user__WEBPACK_IMPORTED_MODULE_2__","Boolean","window","location","hostname","match","Container","styled","div","Chat","ChatMessages","ChatInput","react_default","createElement","Button","button","Button_templateObject","Card","Card_templateObject","Input","input","Input_templateObject","Loading","View_templateObject","React","memo","onSend","waiting","setWaiting","useRef","buttonOnClick","useCallback","current","value","View_Container","ref","disabled","onClick","sendMessage","console","log","ChatInput_View","ChatMessageCard_View_templateObject","align","Footer","p","_templateObject2","Content","_templateObject3","View","_ref2","isYou","ChatMessageCard_View_Container","moment","format","ChatMessages_View_templateObject","messages","username","ChatMessages_View_Container","map","message","index","ChatMessageCard","assign","key","_useAllMessages","Loading_Loading","ChatMessages_View","Chat_View","SignIn_View_templateObject","ButtonComponent","View_templateObject2","onSubmit","inputRef","SignIn_View_Container","View_Button","SignIn","_useSignIn","react_router","to","SignIn_View","App","react_router_dom","basename","process","path","component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","aws_appsync__WEBPACK_IMPORTED_MODULE_0__","aws_appsync__WEBPACK_IMPORTED_MODULE_0___default","n","localforage__WEBPACK_IMPORTED_MODULE_1__","AWSAppSyncClient","region","url","auth","type","apiKey","disableOffline","offlineConfig","callback","succ","warn","info","storage","localForage","_interfaces_User__WEBPACK_IMPORTED_MODULE_0__","_use_user_data__WEBPACK_IMPORTED_MODULE_1__","GET_OLD_MESSAGES","_home_arantespp_projects_cool_chat_packages_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","response","setResponse","query","errors","SENT_MESSAGE","setSentMessage","subscription","subscribe","unsubscribe"],"mappings":"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","file":"static/js/main.02528280.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport localforage from 'localforage';\n\nimport { User } from './interfaces/User';\n\nconst key = 'user-data';\n\nexport const useUserData = () => {\n  const [user, setUserState] = useState<User>({ name: '' });\n  const [error, setError] = useState<any>(null);\n\n  useEffect(() => {\n    localforage\n      .getItem<User>(key)\n      .then(user => {\n        if (user) {\n          setUserState(user);\n        }\n      })\n      .catch(err => setError(err));\n  }, [user.name]);\n\n  const setUser = async (user: User) => {\n    try {\n      const u = await localforage.setItem<User>('user-data', user);\n      setUserState(u);\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  return { setUser, user, error };\n};\n","export * from './interfaces/Message';\n\nexport { useAllMessages } from './use-all-messages';\nexport { useGetOldMessages } from './use-get-old-messages';\nexport { useSendMessage } from './use-send-message';\nexport { useSentMessage } from './use-sent-message';\n","import { useEffect, useState } from 'react';\n\nimport { useGetOldMessages } from './use-get-old-messages';\nimport { useSentMessage } from './use-sent-message';\n\nimport { Message } from './interfaces/Message';\n\nexport const useAllMessages = () => {\n  const { data, loading } = useGetOldMessages();\n  const sentMessage = useSentMessage();\n  const [allMessages, setAllMessages] = useState<Message[]>([]);\n\n  useEffect(() => {\n    if (data && data.getOldMessages) {\n      setAllMessages(all => [...data.getOldMessages, ...all]);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (sentMessage) {\n      setAllMessages(all => {\n        const isSameMessage = ({ author, content, dateTime }: Message) =>\n          author === sentMessage.author &&\n          content === sentMessage.content &&\n          dateTime === sentMessage.dateTime;\n        const messageAlreadySaved = all.find(isSameMessage);\n        if (messageAlreadySaved) {\n          return all;\n        }\n        return [...all, sentMessage];\n      });\n    }\n  }, [sentMessage]);\n\n  return { allMessages, loading };\n};\n","import gql from 'graphql-tag';\n\nimport { client } from '../client';\n\nimport { Message } from './interfaces/Message';\n\ninterface Response {\n  sendMessage: Message;\n}\n\ninterface Variables {\n  author: string;\n  content: string;\n}\n\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($author: String!, $content: String!) {\n    sendMessage(author: $author, content: $content) {\n      author\n      content\n      dateTime\n    }\n  }\n`;\n\nexport const useSendMessage = () => {\n  const send = (variables: Variables) =>\n    client.mutate<Response, Variables>({\n      mutation: SEND_MESSAGE,\n      variables,\n      fetchPolicy: 'no-cache'\n    });\n\n  return send;\n};\n","import { useState, useEffect } from 'react';\n\nimport { useUserData } from '../user';\n\nexport const useSignIn = () => {\n  const { setUser, user, error } = useUserData();\n  const [loading, setLoading] = useState(false);\n  const [signedIn, setSignedIn] = useState(!!user);\n\n  useEffect(() => {\n    setSignedIn(!!user.name);\n  }, [user.name]);\n\n  const signIn = async (name: string) => {\n    setLoading(true);\n    await setUser({ name });\n    setLoading(false);\n  };\n\n  return { signIn, error, loading, signedIn };\n};\n","export { useSignIn } from './use-sign-in';\n","export * from './auth';\nexport * from './messages';\nexport * from './user';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface Props {\n  ChatInput: React.ComponentType;\n  ChatMessages: React.ComponentType;\n}\n\nconst Container = styled.div`\n  max-width: 700px;\n  margin: auto;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Chat = ({ ChatMessages, ChatInput }: Props) => {\n  return (\n    <Container>\n      <ChatMessages />\n      <ChatInput />\n    </Container>\n  );\n};\n\nexport default Chat;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  color: blue;\n  font-size: 1em;\n  padding: 0.75em;\n  border: 2px solid blue;\n  border-radius: 3px;\n`;\n\nexport { Button };\n","import styled from 'styled-components';\n\nconst Card = styled.div`\n  /* width: 100%; */\n  background-color: lightyellow;\n  border-radius: 10px;\n  padding: 10px;\n`;\n\nexport { Card };\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  padding: 0.75em;\n  margin: 0 0.5em;\n  color: blue;\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n`;\n\nexport { Input };\n","import React from 'react';\n\nconst Loading = () => {\n  return <p>Carregando...</p>;\n};\n\nexport { Loading };\n","import React, { useCallback, useRef, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Button, Input } from '../../components';\n\nconst Container = styled.div`\n  width: 100%;\n\n  display: flex;\n  align-items: stretch;\n\n  input {\n    flex: 1 1 100%;\n  }\n`;\n\nexport interface Props {\n  onSend: (content: string) => Promise<void>;\n}\n\nconst View = ({ onSend }: Props) => {\n  const [waiting, setWaiting] = useState(false);\n\n  const input = useRef<HTMLInputElement>(null);\n\n  const buttonOnClick = useCallback(() => {\n    setWaiting(true);\n    onSend(input.current!.value).then(() => {\n      setWaiting(false);\n      input.current!.value = '';\n    });\n  }, [onSend]);\n\n  return (\n    <Container>\n      <Input ref={input} disabled={waiting} />\n      <Button onClick={buttonOnClick} disabled={waiting}>\n        {waiting ? 'Enviando' : 'Enviar'}\n      </Button>\n    </Container>\n  );\n};\n\nexport default React.memo(View);\n","import React from 'react';\n\nimport { useSendMessage } from '../../functionalities';\n\nimport View from './View';\n\nconst ChatInput = () => {\n  const sendMessage = useSendMessage();\n\n  const onSend = async (content: string) => {\n    try {\n      await sendMessage({ author: 'Pedro', content });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return <View onSend={onSend} />;\n};\n\nexport default ChatInput;\n","import React from 'react';\n\nimport moment from 'moment';\nimport styled from 'styled-components';\n\nimport { Message } from '../../functionalities';\n\nimport { Card } from '../../components';\n\nexport interface Props extends Message {\n  isYou: boolean;\n}\n\nconst Container = styled.div<{ align: 'right' | 'left' }>`\n  margin: 10px;\n  ${({ align }) => `margin-${align}: 50px`}\n`;\n\nconst Footer = styled.p`\n  text-align: right;\n  font-size: 0.9em;\n  margin: 0px;\n  font-style: italic;\n`;\n\nconst Content = styled.p`\n  font-size: 1.2em;\n  margin: 10px;\n`;\n\nconst View = ({ author, content, dateTime, isYou }: Props) => {\n  return (\n    <Container align={isYou ? 'left' : 'right'}>\n      <Card>\n        <Content>{content}</Content>\n        <Footer>\n          {author}, às {moment(dateTime).format('HH:mm DD/MM/YY')}\n        </Footer>\n      </Card>\n    </Container>\n  );\n};\n\nexport default View;\n","import View from './View';\n\nexport default View;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport { Message } from '../../functionalities';\n\nimport ChatMessageCard from '../ChatMessageCard';\n\nexport interface Props {\n  messages: Message[];\n  username: string;\n}\n\nconst Container = styled.div`\n  overflow-y: scroll;\n`;\n\nconst View = ({ messages, username }: Props) => {\n  return (\n    <Container>\n      {messages.map((message, index) => {\n        return (\n          <ChatMessageCard\n            key={index}\n            {...message}\n            isYou={username === message.author}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default View;\n","import React from 'react';\n\nimport { useAllMessages } from '../../functionalities';\n\nimport { Loading } from '../../components';\n\nimport View from './View';\n\nconst ChatMessages = () => {\n  const { allMessages, loading } = useAllMessages();\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <View messages={allMessages} username=\"Pedro\" />;\n};\n\nexport default ChatMessages;\n","import React from 'react';\n\nimport View from './View';\n\nimport ChatInput from '../../layouts/ChatInput';\nimport ChatMessages from '../../layouts/ChatMessages';\n\nconst Chat = () => {\n  return <View ChatInput={ChatInput} ChatMessages={ChatMessages} />;\n};\n\nexport default Chat;\n","import React, { useRef } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Button as ButtonComponent, Input } from '../../components';\n\nexport interface Props {\n  onSubmit: (name: string) => void;\n  loading: boolean;\n  error: any;\n}\n\nconst Container = styled.div`\n  max-width: 700px;\n  margin: auto;\n  padding-top: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled(ButtonComponent)`\n  width: 100px;\n  margin-top: 10px;\n`;\n\nconst View = ({ onSubmit, loading }: Props) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const onClick = () => {\n    const name = inputRef.current!.value;\n    if (!name) {\n      return onSubmit('anônimo');\n    }\n    return onSubmit(name);\n  };\n\n  return (\n    <Container>\n      <p>Digite o seu nome</p>\n      <Input ref={inputRef} disabled={loading} />\n      <Button onClick={onClick} disabled={loading}>\n        Entrar\n      </Button>\n    </Container>\n  );\n};\n\nexport default React.memo(View);\n","import React, { useCallback } from 'react';\n\nimport { Redirect } from 'react-router-dom';\n\nimport View from './View';\n\nimport { useSignIn } from '../../functionalities';\n\nconst SignIn = () => {\n  const { signIn, signedIn, loading, error } = useSignIn();\n\n  const onSubmit = useCallback((name: string) => {\n    signIn(name);\n  }, []);\n\n  if (signedIn) {\n    return <Redirect to=\"/chat\" />;\n  }\n\n  return <View onSubmit={onSubmit} loading={loading} error={error} />;\n};\n\nexport default SignIn;\n","import React from 'react';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { useSignIn } from './functionalities';\n\nimport Chat from './pages/Chat';\nimport SignIn from './pages/SignIn';\n\nconst App: React.FC = () => {\n  const { signedIn } = useSignIn();\n\n  console.log('app', signedIn);\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/chat\" component={Chat} />\n        <Route path=\"/\" component={SignIn} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AWSAppSyncClient from 'aws-appsync';\nimport * as localForage from 'localforage';\n\nconst client = new AWSAppSyncClient({\n  region: 'us-east-1',\n  url:\n    'https://4hu5xrozqbfxfnnm3loeehxvba.appsync-api.us-east-1.amazonaws.com/graphql',\n  auth: {\n    type: 'API_KEY',\n    apiKey: 'da2-sligow65s5fjdkrsnuvvahtpla'\n  },\n  disableOffline: false,\n  offlineConfig: {\n    callback: (err, succ) => {\n      if (err) {\n        const { mutation, variables } = err;\n        console.warn(`ERROR for ${mutation}`, err);\n      } else {\n        const { mutation, variables } = succ;\n        console.info(`SUCCESS for ${mutation}`, succ);\n      }\n    },\n    storage: localForage\n  }\n});\n\nexport { client };\n","export * from './interfaces/User';\n\nexport { useUserData } from './use-user-data';\n","import { useEffect, useState } from 'react';\n\nimport gql from 'graphql-tag';\n\nimport { client } from '../client';\n\nimport { Message } from './interfaces/Message';\n\ninterface Response {\n  getOldMessages: Message[];\n}\n\nconst GET_OLD_MESSAGES = gql`\n  query {\n    getOldMessages {\n      author\n      dateTime\n      content\n    }\n  }\n`;\n\nexport const useGetOldMessages = () => {\n  const [response, setResponse] = useState<{\n    data?: Response;\n    loading: boolean;\n    errors?: any;\n  }>({ loading: true });\n\n  useEffect(() => {\n    client\n      .query<Response>({\n        query: GET_OLD_MESSAGES\n      })\n      .then(({ data, loading, errors }) => {\n        setResponse({ data, loading, errors });\n      });\n  }, [response.loading]);\n\n  return response;\n};\n","import { useEffect, useState } from 'react';\nimport gql from 'graphql-tag';\n\nimport { Message } from './interfaces/Message';\n\nimport { client } from '../client';\n\ninterface Response {\n  data: {\n    sentMessage: Message;\n  };\n}\n\nconst SENT_MESSAGE = gql`\n  subscription {\n    sentMessage {\n      author\n      dateTime\n      content\n    }\n  }\n`;\n\nexport const useSentMessage = () => {\n  const [sentMessage, setSentMessage] = useState<Message>();\n\n  useEffect(() => {\n    const subscription = client\n      .subscribe<Response>({\n        query: SENT_MESSAGE\n      })\n      .subscribe(\n        ({ data }) => {\n          setSentMessage(data.sentMessage);\n        },\n        error => console.log(error)\n      );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return sentMessage;\n};\n"],"sourceRoot":""}